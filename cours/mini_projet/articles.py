# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'articles.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import lxml.etree
# from ajouter import Ui_Form
import sys
import xml.etree.ElementTree as xml
from os.path import exists
class Ui_Articles(object):
    def ajouter(self):
        self.ajouter = QtWidgets.QWidget()
        self.ui = Ui_Form()
        self.ui.setupUi(self.ajouter)
    def quitter(self):
        sys.exit(app.exec_())
    def filter(self):
        self.load_data(auteur=self.auteur.text(),date=self.date.text())
        if(self.auteur.text()==""):
            self.load_data("",self.date.text())
    def setupUi(self, Articles):
        Articles.setObjectName("Articles")
        Articles.resize(400, 300)
        self.centralwidget = QtWidgets.QWidget(Articles)
        self.centralwidget.setObjectName("centralwidget")
        Articles.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Articles)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 21))
        self.menubar.setObjectName("menubar")
        self.menufile = QtWidgets.QMenu(self.menubar)
        self.menufile.setObjectName("menufile")
        Articles.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Articles)
        self.statusbar.setObjectName("statusbar")
        Articles.setStatusBar(self.statusbar)
        self.actionAjouter = QtWidgets.QAction(Articles)
        self.actionAjouter.setObjectName("actionAjouter")
        self.actionQuitter = QtWidgets.QAction(Articles)
        self.actionAjouter.triggered.connect(self.ajouter)
        self.actionQuitter.setObjectName("actionQuitter")
        self.actionQuitter.triggered.connect(self.quitter)
        self.menufile.addAction(self.actionAjouter)
        self.menufile.addAction(self.actionQuitter)
        self.menubar.addAction(self.menufile.menuAction())

        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(10, 50, 390, 200))
        self.listWidget.setObjectName("listWidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 20, 47, 13))
        self.label.setObjectName("label")
        self.auteur = QtWidgets.QLineEdit(self.centralwidget)
        self.auteur.setGeometry(QtCore.QRect(50, 20, 113, 20))
        self.auteur.setObjectName("lineEdit")
        self.auteur.textChanged[str].connect(self.filter)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(180, 20, 47, 13))
        self.label_2.setObjectName("label_2")
        self.date = QtWidgets.QDateEdit(self.centralwidget)
        self.date.setGeometry(QtCore.QRect(220, 20, 110, 22))
        self.date.setObjectName("dateEdit")
        self.date.dateChanged.connect(self.filter)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(340, 20, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.actualiser)
        self.retranslateUi(Articles)
        QtCore.QMetaObject.connectSlotsByName(Articles)

        
    def actualiser(self):
        self.load_data("","")
    def retranslateUi(self, Articles):
        self._translate = QtCore.QCoreApplication.translate
        Articles.setWindowTitle(self._translate("Articles", "Articles"))
        self.menufile.setTitle(self._translate("Articles", "Fichier"))
        self.actionAjouter.setText(self._translate("Articles", "Ajouter"))
        self.actionQuitter.setText(self._translate("Articles", "Quitter"))
        self.label.setText(self._translate("Articles", "Auteur"))
        self.label_2.setText(self._translate("Articles", "Date"))
        __sortingEnabled = self.listWidget.isSortingEnabled()
        self.listWidget.setSortingEnabled(False)
        self.load_data("","")
        self.listWidget.setSortingEnabled(__sortingEnabled)
        self.pushButton.setText(self._translate("Articles", "Actualiser"))
    def load_data(self,auteur,date):
        self.listWidget.clear()
        if(exists("articles.xml") == True):
            # if self.auteur.text != "":
            articles = xml.parse("articles.xml").getroot()
            if date != "" and auteur =="":
                articles= articles.findall(f".//article[date='{date}']")
            if date == "" and auteur !="":
                articles= articles.findall(".//article[author='"+str(auteur)+"']")
                print(articles)
            if date != "" and auteur !="":
                articles= articles.findall(f".//article[date='{auteur}']" and f".//article[author='{auteur}']")

            i=-1
            for article in articles:
                item = QtWidgets.QListWidgetItem()
                self.listWidget.addItem(item)
                ch=""
                i+=1
                item = self.listWidget.item(i)
                ch="Titre : "
                for title in article.getiterator("titre"):
                    ch+=title.text+" "
                ch+="\nAuteurs : "
                for auteur in article.getiterator("author"):
                    ch+=auteur.text+", "
                ch+="\nDate : "
                for date in article.getiterator("date"):
                    ch+=date.text
                ch+="\nPages : "
                
                for page in article.getiterator("nbpage"):
                    ch+=page.text
                # print(ch)
                item.setText(self._translate("Articles",ch))
        
    

class Ui_Form(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("ajouter article")
        form_layout = QtWidgets.QFormLayout()
        self.setLayout(form_layout)
        title = QtWidgets.QLabel("Ajouter article")
        title.setFont(QtGui.QFont("Arial",24))
        self.titre_article=QtWidgets.QLineEdit(self)
        self.authors_names=QtWidgets.QLineEdit(self)
        self.date_article=QtWidgets.QDateEdit(self)
        self.nbpage_article=QtWidgets.QSpinBox(self)
        form_layout.addRow(title)
        form_layout.addRow("Titre",self.titre_article)
        form_layout.addRow("Auteurs",self.authors_names)
        form_layout.addRow("Date",self.date_article)
        form_layout.addRow("Pages",self.nbpage_article)
        form_layout.addRow(QtWidgets.QPushButton("Envoyer",clicked=lambda:self.save_data_to_xml()))
        self.show()
    def save_data_to_xml(self):
        if(exists("articles.xml") == True):
            articles=xml.parse("articles.xml").getroot()
        if(exists("articles.xml") == False):
            articles = xml.Element("articles")
        article = xml.SubElement(articles,"article")
        # authors = xml.SubElement(article,"authors")
        authors_list = self.authors_names.text().split(",")
        for a in authors_list:
            author = xml.SubElement(article,"author")
            author.text=a
        
        date = xml.SubElement(article,"date")
        date.text = self.date_article.text()
        titre = xml.SubElement(article,"titre")
        titre.text = self.titre_article.text()
        nbpage = xml.SubElement(article,"nbpage")
        nbpage.text = self.nbpage_article.text()
            
        tree = xml.ElementTree(articles)
        with open("articles.xml","wb") as file:
            tree.write(file_or_filename=file)
        self.close()
    def setupUi(self, Form):
        # self.__init__()
        Form.setObjectName("Form")
        Form.resize(400, 300)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Articles = QtWidgets.QMainWindow()
    ui = Ui_Articles()
    ui.setupUi(Articles)
    Articles.show()
    sys.exit(app.exec_())


